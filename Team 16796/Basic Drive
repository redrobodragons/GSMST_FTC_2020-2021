/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.team2981;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.CRServo;


@TeleOp(name="Current2020Tele-Op", group="Iterative Opmode")


public class Basic_Drive extends OpMode
{
    private DcMotor backLeft = null ;
    private DcMotor backRight = null;
    private DcMotor frontLeft = null;
    private DcMotor frontRight = null;
    private CRServo intake=null;
    private DcMotor connectorWheels=null;
    private DcMotor outtake=null;
    private DcMotor baseArm=null;
    private Servo gripServo=null;
    private CRServo connector = null;

    private double deadzoneX = 0;
    private double deadzoneY = 0;
    private double deadzoneRotate = 0;
    private int level = 0;

    private boolean slowMode = false;
    private boolean yToggle = false;
    private boolean aToggle =false;
    boolean flywheel=false;
    boolean closed=false;

    @Override
    public void init() {
        telemetry.addData("Status", "Initializing");
        backLeft  = hardwareMap.get(DcMotor.class, "backLeft");
        backLeft.setDirection(DcMotor.Direction.FORWARD);
        backRight = hardwareMap.get(DcMotor.class, "backRight");
        backRight.setDirection(DcMotor.Direction.REVERSE);
        frontLeft  = hardwareMap.get(DcMotor.class, "frontLeft");
        frontLeft.setDirection(DcMotor.Direction.FORWARD);
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        frontRight.setDirection(DcMotor.Direction.REVERSE);
        intake = hardwareMap.get(CRServo.class, "intake");
        connectorWheels = hardwareMap.get(DcMotor.class, "connectorWheels");
        outtake = hardwareMap.get(DcMotor.class, "outtake");
        baseArm=hardwareMap.get(DcMotor.class,"baseArm");
        gripServo=hardwareMap.get(Servo.class,"gripServo");
        connector=hardwareMap.get(CRServo.class,"connector");
        


        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");



    }


    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {



    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
    
        }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {
        
       
        //Implementation of a Controller Deadzone to prevent accidental movement due to uncentered joystick.
        if(Math.abs(gamepad1.left_stick_x) < 0.05){
            deadzoneX = 0;
        }
        else{
            deadzoneX = -gamepad1.left_stick_x;
        }

        if(Math.abs(gamepad1.left_stick_y) < 0.05){
            deadzoneY = 0;
        }
        else{
            deadzoneY = -gamepad1.left_stick_y;
        }

        if(Math.abs(gamepad1.right_stick_x) < 0.05){
            deadzoneRotate = 0;
        }
        else{
            deadzoneRotate = gamepad1.right_stick_x;
        }
        
        //Intake Code
        if (gamepad1.left_bumper == true)
        {
            intake.setPower(.5);
        }
        else if (gamepad1.left_trigger>=.95)
        {
            intake.setPower(-.5);
        }
        else
            intake.setPower(0.0);
       
        //Outtake 
        if(gamepad1.y && !yToggle){
            if(!flywheel){
                outtake.setPower(.92);
                flywheel=true;}
            else{
                outtake.setPower(0);
                flywheel=false;
            }
            yToggle = true;
        } else if(!gamepad1.y) yToggle = false;
        
        
        //Connector Code
        if(gamepad1.right_bumper ==true){
            connector.setPower(.75);
        }
        else if(gamepad1.right_trigger>=.95)
        {
            connector.setPower(-.75);
        }
        else{
           connector.setPower(0.0);
            
        }
        
        
        //Wobble Arm Controller Code   
        if(gamepad1.dpad_up)
        {
            baseArm.setPower(-.75);
        }
        else if(gamepad1.dpad_down)
        {
            baseArm.setPower(.5);
        }
        else
        {
            baseArm.setPower(-.1);
        }
        
        //Wobble Arm Gripper Code 
        if(gamepad1.a && !aToggle){
            if(!closed){
                gripServo.setPosition(-1);
                closed=true;}
            else{
                gripServo.setPosition(1);
                closed=false;
            }
            aToggle = true;
        } else if(!gamepad1.a) aToggle = false;
       
        

        
    
        //Mecanum wheel drive calculations
        double r = Math.hypot(deadzoneX, -deadzoneY); //deadzones are incorporated into these values
        double robotAngle = Math.atan2(-deadzoneY, deadzoneX) - Math.PI / 4;
        double rightX = deadzoneRotate/1.25;
        final double v1 = r * Math.cos(robotAngle) + rightX;
        final double v2 = r * Math.sin(robotAngle) - rightX;
        final double v3 = r * Math.sin(robotAngle) + rightX;
        final double v4 = r * Math.cos(robotAngle) - rightX;

        //Power set to each motor based on these calculations
        frontRight.setPower(v1*.75);
        frontLeft.setPower(v4*.75);
        backRight.setPower(v3*.75);
        backLeft.setPower(v2*.75);

//----
        //Telemetry used for testing encoder values.
        telemetry.addData("frontLeftPosition", frontLeft.getCurrentPosition());
        telemetry.addData("backLeftPosition", backLeft.getCurrentPosition());
        telemetry.addData("frontRightPosition", frontRight.getCurrentPosition());
        telemetry.addData("backRightPosition", backRight.getCurrentPosition());
        telemetry.addData("wobbleGoalPosition",baseArm.getCurrentPosition());
        telemetry.addData("r",r);
        telemetry.addData("t",robotAngle);
    }

    @Override
    public void stop() {
    }

}
